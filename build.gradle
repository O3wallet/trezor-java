buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.5'
  }
}

allprojects {
  group = 'uk.co.froot'
  version = '0.0.1-SNAPSHOT'

}

subprojects {
  apply plugin: 'java'
  apply plugin: 'idea'

  sourceCompatibility = 1.8

  ext {
    protobufVersion = '3.5.1'
  }

  repositories {
    mavenCentral()
    mavenLocal()
  }

  dependencies {

    // USB (wrapper for libusb-1.0 with javax.usb extensions)
    compile "org.usb4java:usb4java-javax:1.2.0"

    // Google protobuf for serialisation on the wire
    compile "com.google.protobuf:protobuf-java:$protobufVersion"

    // Logging with slf4j and logback
    compile "org.slf4j:slf4j-api:1.7.25"
    compile "ch.qos.logback:logback-classic:1.+"

    // Testing with junit
    testCompile "junit:junit:4.+"
  }

}

// ///////////////////////////////////////////////////////////////////////////////////////////////////////
// Core project
project(':core') {
  apply plugin: 'com.google.protobuf'

  jar {
    manifest {
      attributes 'Implementation-Title': 'Trezor Java Core',
        'Implementation-Version': version
    }
  }

  sourceSets {
    main {
      // Set an additional source tree for supplied .proto files
      proto {
        srcDir "$projectDir/trezor-common/protob"
      }
      // Set an additional source tree for generated protobuf files
      java {
        srcDirs "$projectDir/gen/main/java"
      }
    }
  }

  protobuf {
    // Target for generated code (main/java is appended and it is cleaned on a rebuild so keep it out of src)
    generatedFilesBaseDir = "$rootDir/core/gen"

    protoc {
      artifact = "com.google.protobuf:protoc:$protobufVersion"
    }

    generateProtoTasks {

      // Ensure all protobuf tasks use generated output correctly
      all().each { task ->
        if (task.name == "generateProto") {
          task.outputs.upToDateWhen {
            new File(generatedFilesBaseDir).exists()
          }
        }
      }

      // Task to clean generated code
      task deleteGeneratedProto {
        doLast {
          delete generatedFilesBaseDir
        }
      }

      // Task to recompile protobuf sources
      task recompileProto {}
      recompileProto.dependsOn(deleteGeneratedProto)
      recompileProto.dependsOn(generateProto)

      // Java compilation should happen after protobuf sources are generated
      compileJava.dependsOn(generateProto)

      // Clean task should remove generated code
      clean.dependsOn(deleteGeneratedProto)
    }

  }

}

// ///////////////////////////////////////////////////////////////////////////////////////////////////////
// Service project
project(':service') {

  dependencies {

    compile project(':core')

  }

}