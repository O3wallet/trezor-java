package uk.co.froot.trezorjava.core;

import javax.usb.UsbDeviceDescriptor;

/**
 * Downstream API consumers should implement this to respond to events coming from the device.
 */
public interface TrezorEventHandler {

  /**
   * Called when a Trezor device is attached.
   *
   * @param trezorType The Trezor type.
   * @param descriptor The USB device descriptor providing more detail.
   */
  void onDeviceAttached(TrezorType trezorType, UsbDeviceDescriptor descriptor);

  /**
   * Called when a Trezor device is detached.
   *
   * @param trezorType The Trezor type.
   * @param descriptor The USB device descriptor providing more detail.
   */
  void onDeviceDetached(TrezorType trezorType, UsbDeviceDescriptor descriptor);

  /**
   * Indicates there is a problem with the hardware wallet (incompatible firmware, USB environment etc)
   */
  void onDeviceFailed(TrezorType trezorType, UsbDeviceDescriptor descriptor);

  /**
   * Indicates that a device is ready to be used.
   * The service will provide more details about wallet creation being necessary and so on.
   */
  void showDeviceReady();

  /**
   * Indicates that a device is detached.
   */
  void showDeviceDetached();

  /**
   * Indicates that a device has been stopped and the service will need to be renewed
   */
  void showDeviceStopped();

  /**
   * The UI should show a message informing the user that the device requires a button press.
   */
  void showButtonPress();

  /**
   * The UI should show a dialog asking the user to enter a word from their seed phrase.
   */
  void showWordEntry();

  /**
   * The UI should show a dialog asking the user to enter their PIN (possibly using an obfuscated matrix technique).
   */
  void showPinEntry();

  /**
   * The UI should show a dialog asking the user to enter their passphrase.
   */
  void showPassphraseEntry();

  /**
   * The UI should show a message telling the user that the operation completed successfully.
   */
  void showOperationSucceeded();

  /**
   * The UI should show a message telling the user that the operation failed to complete (could be their cancellation, unexpected message etc).
   */
  void showOperationFailed();

  /**
   * An additional source of entropy should be provided that will be combined with that shown on the device to
   * yield a seed phrase that can be proved to contain both values. This reduces the chances of compromised hardware.
   */
  void provideEntropy();

  /**
   * An address has been generated by the device in response to an earlier request
   */
  void onAddressGenerated();

  /**
   * A public key been generated by the device in response to an earlier request
   */
  void onPublicKeyGenerated();

  /**
   * An identity public key been generated by the device in response to an earlier request
   */
  void onPublicKeyForIdentity();

  /**
   * A signed message been generated by the device in response to an earlier request
   */
  void onMessageSignature();

  /**
   * A deterministic hierarchy has been generated by the device in response to an earlier request
   */
  void onDeterministicHierarchy();

  /**
   * A signed identity has been generated by the device in response to an earlier request
   */
  void onSignedIdentity();

}
